{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import math\n",
    "import matplotlib\n",
    "import matplotlib.pylab as pl\n",
    "import matplotlib.pyplot as plt\n",
    "import pandas as pd\n",
    "import random \n",
    "import csv\n",
    "import math\n",
    "%matplotlib inline\n",
    "import scipy.spatial as ss\n",
    "import scipy.stats as sst\n",
    "import operator\n",
    "from matplotlib.pyplot import cm \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Unnamed: 0</th>\n",
       "      <th>YEAR</th>\n",
       "      <th>CPSID</th>\n",
       "      <th>MONTH</th>\n",
       "      <th>PERNUM</th>\n",
       "      <th>CPSIDP</th>\n",
       "      <th>WTFINL</th>\n",
       "      <th>AGE</th>\n",
       "      <th>SEX</th>\n",
       "      <th>MARST</th>\n",
       "      <th>EDUC</th>\n",
       "      <th>OCC</th>\n",
       "      <th>OCC2010</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>2010</td>\n",
       "      <td>20091200000200</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20091200000201</td>\n",
       "      <td>3565.7334</td>\n",
       "      <td>60</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>91</td>\n",
       "      <td>350</td>\n",
       "      <td>350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2010</td>\n",
       "      <td>20091200000200</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>20091200000202</td>\n",
       "      <td>2802.2961</td>\n",
       "      <td>29</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>73</td>\n",
       "      <td>6050</td>\n",
       "      <td>6050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>7</td>\n",
       "      <td>2010</td>\n",
       "      <td>20081202574500</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20081202574501</td>\n",
       "      <td>3099.3529</td>\n",
       "      <td>49</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>50</td>\n",
       "      <td>7120</td>\n",
       "      <td>7120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>23</td>\n",
       "      <td>2010</td>\n",
       "      <td>20091003787400</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>20091003787401</td>\n",
       "      <td>2388.1117</td>\n",
       "      <td>45</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>123</td>\n",
       "      <td>620</td>\n",
       "      <td>620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>32</td>\n",
       "      <td>2010</td>\n",
       "      <td>20081201084400</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>20081201084403</td>\n",
       "      <td>2768.3520</td>\n",
       "      <td>37</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>73</td>\n",
       "      <td>4760</td>\n",
       "      <td>4760</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Unnamed: 0  YEAR           CPSID  MONTH  PERNUM          CPSIDP     WTFINL  \\\n",
       "0           0  2010  20091200000200      1       1  20091200000201  3565.7334   \n",
       "1           1  2010  20091200000200      1       2  20091200000202  2802.2961   \n",
       "2           7  2010  20081202574500      1       1  20081202574501  3099.3529   \n",
       "3          23  2010  20091003787400      1       1  20091003787401  2388.1117   \n",
       "4          32  2010  20081201084400      1       3  20081201084403  2768.3520   \n",
       "\n",
       "   AGE  SEX  MARST  EDUC   OCC  OCC2010  \n",
       "0   60    2      4    91   350      350  \n",
       "1   29    1      6    73  6050     6050  \n",
       "2   49    1      1    50  7120     7120  \n",
       "3   45    1      6   123   620      620  \n",
       "4   37    1      6    73  4760     4760  "
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('job_transition_2010_2017.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2010, 2011, 2012, 2013, 2014, 2015, 2016, 2017])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#years covered in the dataset\n",
    "df[\"YEAR\"].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5775912"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#number of observations\n",
    "len(df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1100514"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#unique people in dataset\n",
    "people = list(df['CPSIDP'].unique())\n",
    "len(people)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## Use this ordered list of occupations\n",
    "ipums_occs = pd.read_csv('ipums_ordered_occ_titles.csv')\n",
    "ipums_ordered_occ_codes = list(ipums_occs['ipums_code'])\n",
    "\n",
    "occ_code_title_dict = dict(zip(ipums_occs['ipums_code'], ipums_occs['ipums_ordered_occ_titles']))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>order</th>\n",
       "      <th>ipums_ordered_occ_titles</th>\n",
       "      <th>ipums_code</th>\n",
       "      <th>ACS_broad_classification</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>chief executives and legislators</td>\n",
       "      <td>10</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>general and operations managers</td>\n",
       "      <td>20</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>advertising and promotions managers</td>\n",
       "      <td>40</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>marketing and sales managers</td>\n",
       "      <td>50</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>public relations and fundraising managers</td>\n",
       "      <td>60</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>administrative services managers</td>\n",
       "      <td>100</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>computer and information systems managers</td>\n",
       "      <td>110</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>financial managers</td>\n",
       "      <td>120</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>industrial production managers</td>\n",
       "      <td>140</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>purchasing managers</td>\n",
       "      <td>150</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>10</td>\n",
       "      <td>transportation, storage, and distribution mana...</td>\n",
       "      <td>160</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>11</td>\n",
       "      <td>compensation and benefits managers</td>\n",
       "      <td>135</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>12</td>\n",
       "      <td>human resources managers</td>\n",
       "      <td>136</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>13</td>\n",
       "      <td>training and development managers</td>\n",
       "      <td>137</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>14</td>\n",
       "      <td>farmers, ranchers, and other agricultural mana...</td>\n",
       "      <td>205</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>15</td>\n",
       "      <td>construction managers</td>\n",
       "      <td>220</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>16</td>\n",
       "      <td>education administrators</td>\n",
       "      <td>230</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>17</td>\n",
       "      <td>architectural and engineering managers</td>\n",
       "      <td>300</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>18</td>\n",
       "      <td>food service managers</td>\n",
       "      <td>310</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>19</td>\n",
       "      <td>miscellaneous managers, including funeral serv...</td>\n",
       "      <td>430</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>20</td>\n",
       "      <td>gaming managers</td>\n",
       "      <td>330</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>21</td>\n",
       "      <td>lodging managers</td>\n",
       "      <td>340</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>22</td>\n",
       "      <td>medical and health services managers</td>\n",
       "      <td>350</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>23</td>\n",
       "      <td>natural sciences managers</td>\n",
       "      <td>360</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>24</td>\n",
       "      <td>property, real estate, and community associati...</td>\n",
       "      <td>410</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>25</td>\n",
       "      <td>social and community service managers</td>\n",
       "      <td>420</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>26</td>\n",
       "      <td>emergency management directors</td>\n",
       "      <td>425</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>27</td>\n",
       "      <td>agents and business managers of artists, perfo...</td>\n",
       "      <td>500</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>28</td>\n",
       "      <td>buyers and purchasing agents, farm products</td>\n",
       "      <td>510</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>29</td>\n",
       "      <td>wholesale and retail buyers, except farm products</td>\n",
       "      <td>520</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>434</th>\n",
       "      <td>434</td>\n",
       "      <td>helpers--production workers</td>\n",
       "      <td>8950</td>\n",
       "      <td>Production</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>435</th>\n",
       "      <td>435</td>\n",
       "      <td>supervisors of transportation and material mov...</td>\n",
       "      <td>9000</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>436</th>\n",
       "      <td>436</td>\n",
       "      <td>aircraft pilots and flight engineers</td>\n",
       "      <td>9030</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>437</th>\n",
       "      <td>437</td>\n",
       "      <td>air traffic controllers and airfield operation...</td>\n",
       "      <td>9040</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>438</th>\n",
       "      <td>438</td>\n",
       "      <td>flight attendants</td>\n",
       "      <td>9050</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>439</th>\n",
       "      <td>439</td>\n",
       "      <td>ambulance drivers and attendants, except emerg...</td>\n",
       "      <td>9110</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>440</th>\n",
       "      <td>440</td>\n",
       "      <td>bus drivers</td>\n",
       "      <td>9120</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>441</th>\n",
       "      <td>441</td>\n",
       "      <td>driver/sales workers and truck drivers</td>\n",
       "      <td>9130</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>442</th>\n",
       "      <td>442</td>\n",
       "      <td>taxi drivers and chauffeurs</td>\n",
       "      <td>9140</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>443</th>\n",
       "      <td>443</td>\n",
       "      <td>locomotive engineers and operators</td>\n",
       "      <td>9200</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>444</th>\n",
       "      <td>444</td>\n",
       "      <td>subway, streetcar, and other rail transportati...</td>\n",
       "      <td>9260</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>445</th>\n",
       "      <td>445</td>\n",
       "      <td>railroad conductors and yardmasters</td>\n",
       "      <td>9240</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>446</th>\n",
       "      <td>446</td>\n",
       "      <td>sailors and marine oilers, and ship engineers</td>\n",
       "      <td>9300</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>447</th>\n",
       "      <td>447</td>\n",
       "      <td>ship and boat captains and operators</td>\n",
       "      <td>9310</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>448</th>\n",
       "      <td>448</td>\n",
       "      <td>miscellaneous transportation workers, includin...</td>\n",
       "      <td>9420</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>449</th>\n",
       "      <td>449</td>\n",
       "      <td>parking lot attendants</td>\n",
       "      <td>9350</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>450</th>\n",
       "      <td>450</td>\n",
       "      <td>automotive and watercraft service attendants</td>\n",
       "      <td>9360</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>451</th>\n",
       "      <td>451</td>\n",
       "      <td>transportation inspectors</td>\n",
       "      <td>9410</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>452</th>\n",
       "      <td>452</td>\n",
       "      <td>transportation attendants, except flight atten...</td>\n",
       "      <td>9415</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>453</th>\n",
       "      <td>453</td>\n",
       "      <td>conveyor operators and tenders, and hoist and ...</td>\n",
       "      <td>9560</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>454</th>\n",
       "      <td>454</td>\n",
       "      <td>crane and tower operators</td>\n",
       "      <td>9510</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>455</th>\n",
       "      <td>455</td>\n",
       "      <td>dredge, excavating, and loading machine operators</td>\n",
       "      <td>9520</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>456</th>\n",
       "      <td>456</td>\n",
       "      <td>industrial truck and tractor operators</td>\n",
       "      <td>9600</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>457</th>\n",
       "      <td>457</td>\n",
       "      <td>cleaners of vehicles and equipment</td>\n",
       "      <td>9610</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>458</th>\n",
       "      <td>458</td>\n",
       "      <td>laborers and freight, stock, and material move...</td>\n",
       "      <td>9620</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>459</th>\n",
       "      <td>459</td>\n",
       "      <td>machine feeders and offbearers</td>\n",
       "      <td>9630</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>460</th>\n",
       "      <td>460</td>\n",
       "      <td>packers and packagers, hand</td>\n",
       "      <td>9640</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>461</th>\n",
       "      <td>461</td>\n",
       "      <td>pumping station operators</td>\n",
       "      <td>9650</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>462</th>\n",
       "      <td>462</td>\n",
       "      <td>refuse and recyclable material collectors</td>\n",
       "      <td>9720</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>463</th>\n",
       "      <td>463</td>\n",
       "      <td>miscellaneous material moving workers, includi...</td>\n",
       "      <td>9750</td>\n",
       "      <td>Transportation and material moving</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>464 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     order                           ipums_ordered_occ_titles  ipums_code  \\\n",
       "0        0                   chief executives and legislators          10   \n",
       "1        1                    general and operations managers          20   \n",
       "2        2                advertising and promotions managers          40   \n",
       "3        3                       marketing and sales managers          50   \n",
       "4        4          public relations and fundraising managers          60   \n",
       "5        5                   administrative services managers         100   \n",
       "6        6          computer and information systems managers         110   \n",
       "7        7                                 financial managers         120   \n",
       "8        8                     industrial production managers         140   \n",
       "9        9                                purchasing managers         150   \n",
       "10      10  transportation, storage, and distribution mana...         160   \n",
       "11      11                 compensation and benefits managers         135   \n",
       "12      12                           human resources managers         136   \n",
       "13      13                  training and development managers         137   \n",
       "14      14  farmers, ranchers, and other agricultural mana...         205   \n",
       "15      15                              construction managers         220   \n",
       "16      16                           education administrators         230   \n",
       "17      17             architectural and engineering managers         300   \n",
       "18      18                              food service managers         310   \n",
       "19      19  miscellaneous managers, including funeral serv...         430   \n",
       "20      20                                    gaming managers         330   \n",
       "21      21                                   lodging managers         340   \n",
       "22      22               medical and health services managers         350   \n",
       "23      23                          natural sciences managers         360   \n",
       "24      24  property, real estate, and community associati...         410   \n",
       "25      25              social and community service managers         420   \n",
       "26      26                     emergency management directors         425   \n",
       "27      27  agents and business managers of artists, perfo...         500   \n",
       "28      28        buyers and purchasing agents, farm products         510   \n",
       "29      29  wholesale and retail buyers, except farm products         520   \n",
       "..     ...                                                ...         ...   \n",
       "434    434                        helpers--production workers        8950   \n",
       "435    435  supervisors of transportation and material mov...        9000   \n",
       "436    436               aircraft pilots and flight engineers        9030   \n",
       "437    437  air traffic controllers and airfield operation...        9040   \n",
       "438    438                                  flight attendants        9050   \n",
       "439    439  ambulance drivers and attendants, except emerg...        9110   \n",
       "440    440                                        bus drivers        9120   \n",
       "441    441             driver/sales workers and truck drivers        9130   \n",
       "442    442                        taxi drivers and chauffeurs        9140   \n",
       "443    443                 locomotive engineers and operators        9200   \n",
       "444    444  subway, streetcar, and other rail transportati...        9260   \n",
       "445    445                railroad conductors and yardmasters        9240   \n",
       "446    446      sailors and marine oilers, and ship engineers        9300   \n",
       "447    447               ship and boat captains and operators        9310   \n",
       "448    448  miscellaneous transportation workers, includin...        9420   \n",
       "449    449                             parking lot attendants        9350   \n",
       "450    450    automotive and watercraft service attendants           9360   \n",
       "451    451                          transportation inspectors        9410   \n",
       "452    452  transportation attendants, except flight atten...        9415   \n",
       "453    453  conveyor operators and tenders, and hoist and ...        9560   \n",
       "454    454                          crane and tower operators        9510   \n",
       "455    455  dredge, excavating, and loading machine operators        9520   \n",
       "456    456             industrial truck and tractor operators        9600   \n",
       "457    457                 cleaners of vehicles and equipment        9610   \n",
       "458    458  laborers and freight, stock, and material move...        9620   \n",
       "459    459                     machine feeders and offbearers        9630   \n",
       "460    460                        packers and packagers, hand        9640   \n",
       "461    461                          pumping station operators        9650   \n",
       "462    462          refuse and recyclable material collectors        9720   \n",
       "463    463  miscellaneous material moving workers, includi...        9750   \n",
       "\n",
       "                ACS_broad_classification  \n",
       "0    Management, business, and financial  \n",
       "1    Management, business, and financial  \n",
       "2    Management, business, and financial  \n",
       "3    Management, business, and financial  \n",
       "4    Management, business, and financial  \n",
       "5    Management, business, and financial  \n",
       "6    Management, business, and financial  \n",
       "7    Management, business, and financial  \n",
       "8    Management, business, and financial  \n",
       "9    Management, business, and financial  \n",
       "10   Management, business, and financial  \n",
       "11   Management, business, and financial  \n",
       "12   Management, business, and financial  \n",
       "13   Management, business, and financial  \n",
       "14   Management, business, and financial  \n",
       "15   Management, business, and financial  \n",
       "16   Management, business, and financial  \n",
       "17   Management, business, and financial  \n",
       "18   Management, business, and financial  \n",
       "19   Management, business, and financial  \n",
       "20   Management, business, and financial  \n",
       "21   Management, business, and financial  \n",
       "22   Management, business, and financial  \n",
       "23   Management, business, and financial  \n",
       "24   Management, business, and financial  \n",
       "25   Management, business, and financial  \n",
       "26   Management, business, and financial  \n",
       "27   Management, business, and financial  \n",
       "28   Management, business, and financial  \n",
       "29   Management, business, and financial  \n",
       "..                                   ...  \n",
       "434                           Production  \n",
       "435   Transportation and material moving  \n",
       "436   Transportation and material moving  \n",
       "437   Transportation and material moving  \n",
       "438   Transportation and material moving  \n",
       "439   Transportation and material moving  \n",
       "440   Transportation and material moving  \n",
       "441   Transportation and material moving  \n",
       "442   Transportation and material moving  \n",
       "443   Transportation and material moving  \n",
       "444   Transportation and material moving  \n",
       "445   Transportation and material moving  \n",
       "446   Transportation and material moving  \n",
       "447   Transportation and material moving  \n",
       "448   Transportation and material moving  \n",
       "449   Transportation and material moving  \n",
       "450   Transportation and material moving  \n",
       "451   Transportation and material moving  \n",
       "452   Transportation and material moving  \n",
       "453   Transportation and material moving  \n",
       "454   Transportation and material moving  \n",
       "455   Transportation and material moving  \n",
       "456   Transportation and material moving  \n",
       "457   Transportation and material moving  \n",
       "458   Transportation and material moving  \n",
       "459   Transportation and material moving  \n",
       "460   Transportation and material moving  \n",
       "461   Transportation and material moving  \n",
       "462   Transportation and material moving  \n",
       "463   Transportation and material moving  \n",
       "\n",
       "[464 rows x 4 columns]"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ipums_occs\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "## Create the transition probabilities for each occupation\n",
    "\n",
    "#first calculate total employment for occupations in dataset\n",
    "df_occ_value_counts = df['OCC'].value_counts()\n",
    "ipums_total_employment =np.zeros((len(ipums_ordered_occ_codes)))\n",
    "for i, occ in enumerate(ipums_ordered_occ_codes):\n",
    "    if occ in df_occ_value_counts.keys():\n",
    "        ipums_total_employment[i] = df_occ_value_counts[occ]\n",
    "        \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# figure out total number of transitions- this code takes a while to run (feel free to try to make it faster!) \n",
    "\n",
    "ipums_occ_set = set(ipums_ordered_occ_codes) # create a set of the ipums occupations\n",
    "transitions = np.zeros((len(ipums_ordered_occ_codes),len(ipums_ordered_occ_codes))) # where we will store the raw number of transitions\n",
    "\n",
    "for i in people:\n",
    "    p_data = df[df['CPSIDP']==i] # person specific data\n",
    "    career_path = list(p_data['OCC']) # the occupations that person was in over the sampled periods (ordered chronologically)\n",
    "\n",
    "    # if that person had a job change in their career path:\n",
    "    if career_path.count(career_path[0]) != len(career_path):\n",
    "        # figure out the transitions\n",
    "        person_transitions = {} #dictionary of occ i,j transitions\n",
    "        for i in range(len(career_path)):\n",
    "            if i < len(career_path)-1 and career_path[i] !=career_path[i+1]:\n",
    "                person_transitions[career_path[i]]=career_path[i+1]\n",
    "                \n",
    "        # put person transitions in transition matrix        \n",
    "        for k,v in person_transitions.iteritems():\n",
    "            # if the CPS occupations are in our ipums occupation set (not all of them are... )\n",
    "            if {k,v} <= ipums_occ_set: \n",
    "                # add a 1 in the correct spot in the transition matrix\n",
    "                transitions[ipums_ordered_occ_codes.index(k),ipums_ordered_occ_codes.index(v)] += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[   0.,  120.,    2., ...,    1.,    1.,    0.],\n",
       "       [ 150.,    0.,    5., ...,    1.,    1.,    0.],\n",
       "       [   4.,    6.,    0., ...,    0.,    0.,    0.],\n",
       "       ..., \n",
       "       [   0.,    5.,    0., ...,    0.,    0.,    0.],\n",
       "       [   1.,    3.,    0., ...,    0.,    0.,    2.],\n",
       "       [   1.,    1.,    0., ...,    0.,    2.,    0.]])"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transitions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#save the total number transition matrix to file so you don't have to re-calculate it\n",
    "np.savetxt('transition_matrix_total_number_2000_2017.csv',transitions,delimiter = ',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#normalise by number of transitions for each occupation to get transition probability\n",
    "num_occ_transitions = transitions.sum(axis = 1)\n",
    "\n",
    "transition_probability =np.zeros((len(ipums_ordered_occ_codes),len(ipums_ordered_occ_codes))) \n",
    "for i in range(len(ipums_ordered_occ_codes)):\n",
    "    for j in range(len(ipums_ordered_occ_codes)):\n",
    "        transition_probability[i,j] = np.nan_to_num(transitions[i,j]/float(num_occ_transitions[i]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 0.        ,  0.02261591,  0.00037693, ...,  0.00018847,\n",
       "         0.00018847,  0.        ],\n",
       "       [ 0.03334815,  0.        ,  0.00111161, ...,  0.00022232,\n",
       "         0.00022232,  0.        ],\n",
       "       [ 0.01142857,  0.01714286,  0.        , ...,  0.        ,\n",
       "         0.        ,  0.        ],\n",
       "       ..., \n",
       "       [ 0.        ,  0.03496503,  0.        , ...,  0.        ,\n",
       "         0.        ,  0.        ],\n",
       "       [ 0.00183824,  0.00551471,  0.        , ...,  0.        ,\n",
       "         0.        ,  0.00367647],\n",
       "       [ 0.00273973,  0.00273973,  0.        , ...,  0.        ,\n",
       "         0.00547945,  0.        ]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "transition_probability"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#save transition probability matrix to file\n",
    "np.savetxt('transition_matrix_probability_2000_2017.csv',transition_probability,delimiter = ',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Node and edge lists etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "# read in adjacency matrix\n",
    "A = np.loadtxt('transition_matrix_probability_2000_2017.csv',delimiter = ',')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x11749e550>"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x117454310>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# show adjacency matrix\n",
    "\n",
    "plt.imshow(A, vmin = 0, vmax = 0.05)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "#get the upper triangle\n",
    "flat_A = []\n",
    "for i in range(len(A)):\n",
    "    for j in range(len(A)):\n",
    "        if i > j:\n",
    "            flat_A.append(A[i,j])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n/wEmWeF7wAtxQgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x117207ad0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.hist(flat_A,bins = 100)\n",
    "plt.yscale('log', nonposy='clip')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "# thresholds\n",
    "A_mean,A_std = np.mean(flat_A),np.std(flat_A)\n",
    "\n",
    "#tukey\n",
    "beta_A = sst.expon.fit(flat_A,floc=0)[1]\n",
    "tukey_thresh = np.log(4)*beta_A + 1.5*np.log(3)*beta_A\n",
    "sd_1_thresh = A_mean + 1*A_std\n",
    "sd_2_thresh = A_mean + 2*A_std"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0069666858786316069"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tukey_thresh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0122060624770058"
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "sd_1_thresh"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "import networkx as nx\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [],
   "source": [
    "#node list\n",
    "id_ = [x for x in range(len(A))]\n",
    "label_ = list(ipums_occs['ipums_ordered_occ_titles'])\n",
    "occ_code_ = list(ipums_occs['ipums_code'])\n",
    "occ_class_ = list(ipums_occs['ACS_broad_classification'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "nl = pd.DataFrame()\n",
    "nl['Id'] = id_\n",
    "nl['Label'] = label_\n",
    "nl['Classification'] = occ_class_\n",
    "nl.to_csv('node_list.csv', index = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Id</th>\n",
       "      <th>Label</th>\n",
       "      <th>Classification</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>chief executives and legislators</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>general and operations managers</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>advertising and promotions managers</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>marketing and sales managers</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>public relations and fundraising managers</td>\n",
       "      <td>Management, business, and financial</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Id                                      Label  \\\n",
       "0   0           chief executives and legislators   \n",
       "1   1            general and operations managers   \n",
       "2   2        advertising and promotions managers   \n",
       "3   3               marketing and sales managers   \n",
       "4   4  public relations and fundraising managers   \n",
       "\n",
       "                        Classification  \n",
       "0  Management, business, and financial  \n",
       "1  Management, business, and financial  \n",
       "2  Management, business, and financial  \n",
       "3  Management, business, and financial  \n",
       "4  Management, business, and financial  "
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "nl.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#edge list\n",
    "#MST + thresholds\n",
    "def create_mst_plus_edges(complete_graph,threshold):\n",
    "    #create MST\n",
    "    np.fill_diagonal(complete_graph,0)\n",
    "    neg_prox_mat = complete_graph*-1\n",
    "\n",
    "    #turn this into a graph object\n",
    "    A = nx.from_numpy_matrix(neg_prox_mat)\n",
    "    #get the maximum spanning tree\n",
    "    T = nx.algorithms.minimum_spanning_tree(A)\n",
    "    \n",
    "    print 'number of nodes in mst:', T.number_of_nodes()\n",
    "    \n",
    "    #now create additional eges\n",
    "    \n",
    "    n = len(complete_graph[0,:])\n",
    "    modified_prox_matrix = np.zeros((n,n))\n",
    "    # just put the links that are greater than the threshold in the modified prox matrix\n",
    "    for i in range(n):\n",
    "        for j in range(n):\n",
    "            prox = complete_graph[i,j]\n",
    "            if prox > threshold:\n",
    "                modified_prox_matrix[i,j] = prox\n",
    "    #now add these edges to the MST (noting that these edges are negative from minimum rather than maximum spanning tree)\n",
    "    new_neg_prox_mat = modified_prox_matrix*-1\n",
    "    New = nx.from_numpy_matrix(new_neg_prox_mat)\n",
    "    new_edges = []\n",
    "    for i in New.edges(data=True):\n",
    "        #if new edges are not in MST, ddd them\n",
    "        if i not in T.edges(data=True):\n",
    "            new_edges.append(i)\n",
    "    print 'number new edges: ', len(new_edges)\n",
    "    return T, new_edges\n",
    "    \n",
    "                                   \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "number of nodes in mst: 464\n",
      "number new edges:  7160\n"
     ]
    }
   ],
   "source": [
    "MST, new_edges = create_mst_plus_edges(A,sd_1_thresh)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "#now create edge list for gephi\n",
    "source = []\n",
    "target = []\n",
    "weight = []\n",
    "type_ = []\n",
    "#first add in MST edges\n",
    "for i in MST.edges(data=True):\n",
    "    source.append(i[0])\n",
    "    target.append(i[1])\n",
    "    weight.append(i[2]['weight']*-1)\n",
    "    type_.append('Undirected') #you might want to make directed instead!\n",
    "    \n",
    "#then add in extra edges\n",
    "for i in new_edges:\n",
    "    source.append(i[0])\n",
    "    target.append(i[1])\n",
    "    weight.append(i[2]['weight']*-1)\n",
    "    type_.append('Undirected')\n",
    "\n",
    "#then create dataframe\n",
    "\n",
    "df_new_edges = pd.DataFrame()\n",
    "df_new_edges['Source']= source\n",
    "df_new_edges['Target'] = target\n",
    "df_new_edges['Weight'] = weight\n",
    "df_new_edges['Type'] = type_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style>\n",
       "    .dataframe thead tr:only-child th {\n",
       "        text-align: right;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Source</th>\n",
       "      <th>Target</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>370</td>\n",
       "      <td>0.057143</td>\n",
       "      <td>Undirected</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.037424</td>\n",
       "      <td>Undirected</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0.023468</td>\n",
       "      <td>Undirected</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>0.054363</td>\n",
       "      <td>Undirected</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>13</td>\n",
       "      <td>0.023529</td>\n",
       "      <td>Undirected</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Source  Target    Weight        Type\n",
       "0       0     370  0.057143  Undirected\n",
       "1       1       8  0.037424  Undirected\n",
       "2       1       5  0.023468  Undirected\n",
       "3       1      21  0.054363  Undirected\n",
       "4       1      13  0.023529  Undirected"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new_edges.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "df_new_edges.to_csv('edge_list_thresh_1sd.csv', index = False)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.14"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
